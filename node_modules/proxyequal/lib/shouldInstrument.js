'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shouldInstrument = shouldInstrument;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Based on https://github.com/nx-js/observer-util/blob/master/src/builtIns/index.js

// built-in object can not be wrapped by Proxies, or, to be clear - unfreezed
// their methods expect the object instance as the 'this' instead of the Proxy wrapper
// complex objects are wrapped with a Proxy of instrumented methods
// which switch the proxy to the raw object and to add reactive wiring
var collectionHandlers = _defineProperty({
  get: true,
  has: true,
  forEach: true,
  keys: true,
  values: true,
  entries: true,
  size: true
}, Symbol.iterator, true);

var handlers = {
  Map: collectionHandlers,
  Set: collectionHandlers,
  WeakMap: collectionHandlers,
  WeakSet: collectionHandlers,
  Object: false,
  Array: false,
  Int8Array: false,
  Uint8Array: false,
  Uint8ClampedArray: false,
  Int16Array: false,
  Uint16Array: false,
  Int32Array: false,
  Uint32Array: false,
  Float32Array: false,
  Float64Array: false
};

var globalObj = typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {};

function shouldInstrument(_ref) {
  var constructor = _ref.constructor;

  var name = constructor.name;
  var isBuiltIn = typeof constructor === 'function' && name in globalObj && globalObj[name] === constructor;
  return !isBuiltIn || handlers.hasOwnProperty(name);
}

var getCollectionHandlers = exports.getCollectionHandlers = function getCollectionHandlers(_ref2) {
  var constructor = _ref2.constructor;
  return handlers[constructor.name];
};