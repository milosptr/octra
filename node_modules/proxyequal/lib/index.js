'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withProxiesDisabled = exports.proxyArrayRest = exports.proxyObjectRest = exports.collectValuables = exports.collectShallows = exports.getProxyKey = exports.isProxyfied = exports.deproxify = exports.get = exports.proxyCompare = exports.proxyState = exports.proxyShallowEqual = exports.proxyShallow = exports.proxyEqual = exports.drainDifference = exports.PROXY_REST = exports.deepDeproxify = exports.sourceMutationsEnabled = exports.spreadGuardsEnabled = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _searchTrie = require('search-trie');

var _searchTrie2 = _interopRequireDefault(_searchTrie);

var _crc = require('crc-32');

var _proxyPolyfill = require('./proxy-polyfill');

var _proxyPolyfill2 = _interopRequireDefault(_proxyPolyfill);

var _shouldInstrument = require('./shouldInstrument');

var _weakMemoize = require('./weakMemoize');

var _objectTrie = require('./objectTrie');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var hasProxy = typeof Proxy !== 'undefined';
var ProxyConstructor = hasProxy ? Proxy : (0, _proxyPolyfill2.default)();

var spreadMarker = '!SPREAD';
var __proxyequal_scanEnd = '__proxyequal_scanEnd';
var spreadActivation = '__proxyequal_spreadActivation';
var objectKeysMarker = '!Keys';

var areSpreadGuardsEnabled = false;
var areSourceMutationsEnabled = false;

var DISABLE_ALL_PROXIES = false;

var spreadGuardsEnabled = exports.spreadGuardsEnabled = function spreadGuardsEnabled(flag) {
  return areSpreadGuardsEnabled = flag;
};
var sourceMutationsEnabled = exports.sourceMutationsEnabled = function sourceMutationsEnabled(flag) {
  return areSourceMutationsEnabled = flag;
};

var ProxyToState = new WeakMap();
var ProxyToFinderPrint = new WeakMap();

var isProxyfied = function isProxyfied(object) {
  return object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' ? ProxyToState.has(object) : false;
};

var deproxify = function deproxify(object) {
  return object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' ? ProxyToState.get(object) : object || object;
};

var deepDeproxify = exports.deepDeproxify = function deepDeproxify(object) {
  if (object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object') {
    var current = object;
    while (ProxyToState.has(current)) {
      current = ProxyToState.get(current);
    }
    return current;
  }
  return object;
};

var getProxyKey = function getProxyKey(object) {
  return object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' ? ProxyToFinderPrint.get(object) : {};
};

var prepareObject = function prepareObject(state) {
  if (Object.isFrozen(state)) {
    // unfreeze
    if (Array.isArray(state)) {
      return state.slice(0);
    }
    if (state.constructor.name === 'Object') {
      var clone = Object.assign({}, state);
      Object.setPrototypeOf(clone, Object.getPrototypeOf(state));
      return clone;
    }
  }
  return state;
};

var PROXY_REST = exports.PROXY_REST = Symbol('PROXY_REST');
var shouldProxy = function shouldProxy(type) {
  return type === 'object';
};

function proxyfy(state, report) {
  var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var fingerPrint = arguments[3];
  var ProxyMap = arguments[4];
  var control = arguments[5];

  if (!state) {
    return state;
  }
  var alreadyProxy = isProxyfied(state);

  if (!alreadyProxy && !(0, _shouldInstrument.shouldInstrument)(state)) {
    return state;
  }

  var hasCollectionHandlers = !alreadyProxy && (0, _shouldInstrument.getCollectionHandlers)(state);

  var storedValue = ProxyMap.get(state) || {};
  if (storedValue[suffix]) {
    return storedValue[suffix];
  }

  var theBaseObject = alreadyProxy ? state : prepareObject(state);
  var shouldHookOwnKeys = areSpreadGuardsEnabled && !isProxyfied(state);

  var iterable = function iterable(key, iterator) {
    var _ref;

    var index = 0;
    var next = function next() {
      var nextItem = iterator.next();
      var subKey = key + '.' + index;
      index++;
      return _extends({}, nextItem, {
        get value() {
          if (nextItem.done && !nextItem.value) {
            return;
          }
          return proxyValue(subKey, nextItem.value);
        }
      });
    };
    return _ref = {}, _defineProperty(_ref, Symbol.iterator, function () {
      return {
        next: next
      };
    }), _defineProperty(_ref, 'next', next), _ref;
  };

  var proxyValue = function proxyValue(key, value) {
    var thisId = report(suffix, key);
    var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

    if (shouldProxy(type)) {
      return proxyfy(value, control.report, thisId, fingerPrint, ProxyMap, control);
    }

    if (hasCollectionHandlers) {
      switch (key) {
        case 'get':
          return function (key) {
            return proxyValue(key, state.get(key));
          };
        case 'has':
          return function (key) {
            return proxyValue(key, state.has(key));
          };
        case 'keys':
          return function () {
            return state.keys();
          };
        case 'values':
          return function () {
            return iterable(key, state.values());
          };
        case 'entries':
          return function () {
            return iterable(key, state.entries());
          };
        case [Symbol.iterator]:
          return iterable(key, state[Symbol.iterator]);
      }
    }

    return value;
  };

  var hooks = {
    set: function set(target, prop, value) {
      var thisId = report(suffix, prop);
      if (areSourceMutationsEnabled) {
        state[prop] = value;
        return true;
      } else {
        /* eslint-disable-next-line */
        console.error('Source object mutations are disabled, but you tried to set', value, 'on key', thisId, 'on', state);
        return false;
      }
    },
    get: function get(target, prop) {
      if (prop === __proxyequal_scanEnd) {
        report(suffix, spreadMarker, suffix);
        return false;
      }

      var storedValue = state[prop];
      if (DISABLE_ALL_PROXIES) {
        return storedValue;
      }
      if (typeof prop === 'string') {
        return proxyValue(prop, storedValue);
      }

      return storedValue;
    }
  };

  hooks['ownKeys'] = function () {
    var keys = [].concat(Object.getOwnPropertyNames(state), Object.getOwnPropertySymbols(state));
    if (!DISABLE_ALL_PROXIES) {
      report(suffix, objectKeysMarker, theBaseObject);
      if (shouldHookOwnKeys) {
        report(suffix, spreadActivation, theBaseObject);
        keys.push(__proxyequal_scanEnd);
      }
    }
    return keys;
  };

  var proxy = new ProxyConstructor(theBaseObject, hooks);
  storedValue[suffix] = proxy;
  ProxyMap.set(state, storedValue);
  ProxyToState.set(proxy, state);

  ProxyToFinderPrint.set(proxy, {
    suffix: suffix,
    fingerPrint: fingerPrint,
    report: report,
    ProxyMap: ProxyMap,
    control: control
  });
  return proxy;
}

var withProxiesDisabled = function withProxiesDisabled(fn) {
  if (DISABLE_ALL_PROXIES) {
    return fn();
  }
  DISABLE_ALL_PROXIES = true;
  try {
    return fn();
  } finally {
    DISABLE_ALL_PROXIES = false;
  }
};

var collectValuables = function collectValuables(lines) {
  var values = [];
  for (var i = 0; i < lines.length; ++i) {
    var line = lines[i];
    var index = line.lastIndexOf('.');
    if (index < 0 && values.indexOf(line) < 0) {
      // no "." and new value
      values.push(line);
      continue;
    }
    while (index >= 0) {
      line = line.slice(0, index);
      if (values.indexOf(line) < 0) {
        values.push(line);
        index = line.lastIndexOf('.');
      } else {
        break; // done that
      }
    }
  }
  return lines.filter(function (line) {
    return values.indexOf(line) < 0;
  });
};

var collectShallows = function collectShallows(lines) {
  var trie = (0, _searchTrie2.default)(lines);
  return lines.filter(function (value) {
    return trie(value + '.') || !value.lastIndexOf('.');
  });
};

var memoizedCollectValuables = (0, _weakMemoize.weakMemoizeArray)(collectValuables);
var memoizedCollectShallows = (0, _weakMemoize.weakMemoizeArray)(collectShallows);

var get = function get(target, path) {
  var result = target;
  for (var i = 1; i < path.length && result; ++i) {
    var key = path[i];
    if (key[0] === '!') {
      if (key === objectKeysMarker) {
        return Object.keys(result).map(_crc.str).reduce(function (acc, x) {
          return acc ^ x;
        }, 0);
      }
    }
    result = result[key];
  }
  return result;
};

var differs = [];

var drainDifference = exports.drainDifference = function drainDifference() {
  var d = differs;
  differs = [];
  return d;
};

var proxyCompare = function proxyCompare(a, b, locations) {
  DISABLE_ALL_PROXIES = true;
  var ret = function () {
    for (var i = 0; i < locations.length; ++i) {
      var key = locations[i];
      var path = key.split('.');
      var la = get(a, path);
      var lb = get(b, path);
      if (la === lb || deepDeproxify(la) === deepDeproxify(lb)) {
        // nope
      } else {
        differs.push([key, 'differs', la, lb]);
        return false;
      }
    }
    return true;
  }();
  DISABLE_ALL_PROXIES = false;
  return ret;
};

var getterHelper = ['', ''];

var differ = [];
var walk = function walk(la, lb, node) {
  if (la === lb || deepDeproxify(la) === deepDeproxify(lb)) {
    return true;
  }
  if (node === _objectTrie.EDGE) {
    return false;
  }
  var items = Object.keys(node);
  for (var i = 0; i < items.length; ++i) {
    var item = items[i];
    getterHelper[1] = item;
    if (!walk(get(la, getterHelper), get(lb, getterHelper), node[item])) {
      differ.unshift(item);
      return false;
    }
  }
  return true;
};
var proxyShallowEqual = function proxyShallowEqual(a, b, locations) {
  DISABLE_ALL_PROXIES = true;
  differ = [];
  differs = [];
  var ret = function () {
    var root = (0, _objectTrie.memoizedBuildTrie)(locations);
    return walk(a, b, root);
  }();
  DISABLE_ALL_PROXIES = false;
  if (!ret) {
    differ.unshift('');
    differs.push([differ.join('.'), 'not equal']);
  }
  return ret;
};

var proxyEqual = function proxyEqual(a, b, affected) {
  differs = [];
  return proxyCompare(a, b, memoizedCollectValuables(affected));
};
var proxyShallow = function proxyShallow(a, b, affected) {
  differs = [];
  return proxyCompare(a, b, memoizedCollectShallows(affected));
};

var proxyState = function proxyState(state) {
  var fingerPrint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var _ProxyMap = arguments[2];

  var lastAffected = null;
  var affected = [];
  var affectedEqualToLast = true;

  var set = new Set();
  var ProxyMap = _ProxyMap || new WeakMap();
  var spreadDetected = false;
  var speadActiveOn = [];
  var sealed = 0;

  var addSpreadTest = function addSpreadTest(location) {
    Object.defineProperty(location, __proxyequal_scanEnd, {
      value: 'this is secure guard',
      configurable: true,
      enumerable: true
    });
  };
  var removeSpreadTest = function removeSpreadTest() {
    speadActiveOn.forEach(function (target) {
      return Object.defineProperty(target, __proxyequal_scanEnd, {
        value: 'here was spread guard',
        configurable: true,
        enumerable: false
      });
    });
    speadActiveOn = [];
  };

  var onKeyUse = function onKeyUse(suffix, keyName, location) {
    var key = suffix + '.' + keyName;
    if (!sealed) {
      if (keyName === spreadActivation) {
        addSpreadTest(location);
        speadActiveOn.push(location);
      } else if (keyName === spreadMarker) {
        spreadDetected = spreadDetected || location;
      } else {
        if (!set.has(key)) {
          set.add(key);
          affected.push(key);
          if (lastAffected) {
            var position = affected.length - 1;
            if (lastAffected[position] !== affected[position]) {
              affectedEqualToLast = false;
            }
          }
        }
      }
    }
    return key;
  };

  var shouldUseLastAffected = function shouldUseLastAffected() {
    return lastAffected && affectedEqualToLast && lastAffected.length === affected.length;
  };

  var control = {
    get affected() {
      return shouldUseLastAffected() ? lastAffected : affected;
    },
    get spreadDetected() {
      return spreadDetected;
    },

    replaceState: function replaceState(state) {
      this.state = createState(state);
      spreadDetected = false;
      this.unseal();
      sealed = 0;
      return this;
    },
    seal: function seal() {
      sealed++;
      removeSpreadTest();
    },
    unseal: function unseal() {
      sealed--;
    },
    reset: function reset() {
      if (!shouldUseLastAffected()) {
        lastAffected = affected;
      }
      affectedEqualToLast = true;
      affected = [];
      spreadDetected = false;
      sealed = 0;
      set.clear();
    },


    report: onKeyUse
  };

  var createState = function createState(state) {
    return proxyfy(state, onKeyUse, '', fingerPrint, ProxyMap, control);
  };
  control.state = createState(state);

  return control;
};

var proxyObjectRest = function proxyObjectRest(state, excludingKeys) {
  var _getProxyKey = getProxyKey(state),
      suffix = _getProxyKey.suffix,
      fingerPrint = _getProxyKey.fingerPrint,
      report = _getProxyKey.report,
      ProxyMap = _getProxyKey.ProxyMap,
      control = _getProxyKey.control;

  var results = [];
  var excludeMap = {};
  excludingKeys.forEach(function (k) {
    results.push(state[k]);
    excludeMap[k] = true;
  });

  control.seal();
  var rest = {};
  Object.keys(state).forEach(function (k) {
    if (!excludeMap[k]) {
      rest[k] = state[k];
    }
  });
  control.unseal();

  return [].concat(results, [proxyfy(rest, report, suffix, fingerPrint, ProxyMap, control)]);
};

var proxyArrayRest = function proxyArrayRest(state, fromIndex) {
  var _getProxyKey2 = getProxyKey(state),
      suffix = _getProxyKey2.suffix,
      fingerPrint = _getProxyKey2.fingerPrint,
      report = _getProxyKey2.report,
      ProxyMap = _getProxyKey2.ProxyMap,
      control = _getProxyKey2.control;

  var results = [];
  var rest = [];
  var l = state.length;
  var i = void 0;
  for (i = 0; i < l && i < fromIndex; ++i) {
    results.push(state[i]);
  }

  control.seal();
  for (; i < l; ++i) {
    rest.push(state[i]);
  }
  control.unseal();

  var prefixedReport = function prefixedReport(prefix, key) {
    if (key === String(+key)) {
      report(prefix, +key + fromIndex);
    } else {
      report(prefix, key);
    }
  };

  return [].concat(results, [proxyfy(rest, prefixedReport, suffix, fingerPrint, ProxyMap, control)]);
};

exports.proxyEqual = proxyEqual;
exports.proxyShallow = proxyShallow;
exports.proxyShallowEqual = proxyShallowEqual;
exports.proxyState = proxyState;
exports.proxyCompare = proxyCompare;
exports.get = get;
exports.deproxify = deproxify;
exports.isProxyfied = isProxyfied;
exports.getProxyKey = getProxyKey;
exports.collectShallows = collectShallows;
exports.collectValuables = collectValuables;
exports.proxyObjectRest = proxyObjectRest;
exports.proxyArrayRest = proxyArrayRest;
exports.withProxiesDisabled = withProxiesDisabled;